define([
    "text!views/upserr",
	"text!views/searchForm",
	"css!cs/stylesheets/adminPage.css"
], function (
    upsError,
    searchForm
) {

	return Backbone.View.extend({
        el: '.component-box',
        locationList: undefined,
		config: {
			form: {
                name: 'upsErrorForm',
                formHTML: searchForm,
                header: '검색',
                fields: [
                    { name: 'startDate', type: 'date', options:{ format: 'yyyy/mm/dd', end: $('input[name=endDate]'), keyboard: false, silent:false}},
                    { name: 'endDate', type: 'date', options:{ format: 'yyyy/mm/dd', end: $('input[name=startDate]'), keyboard: false, silent:false}},
                    { name: 'location', type: 'list', options: { items: window.main.view.upsList} },
                ],
                actions: {
                    'reset': function(){
                        var form = this;
                        form.clear();
                        window.main.view.adminView.initForm();
                        window.w2ui['upsErrorGrid'].clear();


                    },
                    'save' : function(){
                        var form = window.w2ui['netErrorForm'];
                        var record = form.record;

                        var _tempStartDate = record['startDate'] ? record['startDate'] : $('input[name=startDate]').val();
                        var _startDate=_tempStartDate.replace(/\//g,'-');
                        
                        var _tempEndDate = record['endDate'] ? record['endDate'] : $('input[name=endDate]').val();
                        var substr= _tempEndDate.split('/');
                        var endYear = substr[0];
                        var endMonth = substr[1];
                        var endDate = Number(substr[2])+1;
                        endDate = endDate >= 10 ? endDate : '0'+endDate;
                        var _endDate = endYear+'-'+endMonth+'-'+endDate; 
                        var deviceId = record['locatation'] ? record['locatation']['value'] : undefined;

                        var searchObj = {};
                        searchObj.startDate = _startDate;
                        searchObj.endDate = _endDate;
                        searchObj.deviceId = deviceId;

                        console.log('searchObj->>', searchObj);
                        window.main.view.adminView.search(searchObj);

                        $('.w2ui-icon-collapse').trigger('click');


                    }
                }, //end actions
                onAction : function(event){
                    var target = event.target;
                    if( target === 'download'){
                        window.main.view.adminView.excelDownload();
                    }
                    else if( target === 'thisWeek'){
                        window.main.view.adminView.setThisWeek();

                    }
                    else if( target === 'thisMonth'){
                        window.main.view.adminView.setThisMonth();
                    }
                    else if( target === 'lastMonth'){
                        window.main.view.adminView.setLastMonth();
                    }
                },
                onChange:  function(event){
                    var target = event.target;
                    if(target === 'locatation'){
                        var deviceVal = $('input[name=location]').val();
                    }
                }             
            }, // end form
            grid: {
                name:'upsErrorGrid',
                recid: "id",
                show: { footer: true },
                columnGroups: [
                    { caption: '보조 전원장치', span: 4 },
                    { caption: '전원 상태', span: 2 },
                    { caption: '네트워크', span: 3 }
                ],        
                columns: [                
                    { field: 'location', caption: '설치위치(상세설명)', size: '10%', attr: "align=left"},
                    { field: 'blackout_time', caption: '보조 전원 사용시작', size: '10%', attr: "align=right"},
                    { field: 'battery_remain', caption: '사용시간', size: '7%', attr: "align=right" },
                    { field: 'battery_remain', caption: '배터리방전', size: '10%', attr: "align=right" },
                    { field: 'restore_time', caption: '복구일시', size: '10%', attr: "align=right"},
                    { field: 'ups_delay_time', caption: '장애 누적시간', size: '7%', attr: "align=right"},
                    { field: 'error_time', caption: '장애 발생', size: '10%', attr: "align=right"},
                    { field: 'restore_time', caption: '복구', size: '10%', attr: "align=right"},
                    { field: 'network_delay_time', caption: '장애 누적시간', size: '7%', attr: "align=right"}
                ],
                records: undefined
            } // end grid
		},
		initialize: function () {
			console.log('upsError.js');
            this.$el.html(upsError)
            this.render();
            this.upsBinding();

        },
        events: {
		},
        render: function (){
            var _this = this;
            var formOption = _this.config.form;
            _this.$el.find('#upsError_form').w2form(formOption);
            var gridOption = _this.config.grid;
            console.log(gridOption)
            _this.$el.find('#upsError_grid').w2grid(gridOption);

            
            _this.initForm();
        },
        upsBinding: function(){
            var _this = this;
            var _ups = window.main.view.upsData;
            console.log(_ups)
     
        },
        initForm: function(){
            var _this = this;
            _this.$el.find('.w2ui-field:nth-child(1)').css('display','none');
            _this.$el.find('.w2ui-field:nth-child(4)').css('display','none');

            
            var toDate = _this.getToDay();
            _this.$el.find('input[name=startDate]').val(toDate);
            _this.$el.find('input[name=endDate]').val(toDate);
            _this.$el.find('input[name=endDate]').w2tag();
            _this.$el.find('input[name=endDate]').removeClass('w2ui-error');
            _this.$el.find('#search-btn').prop('disabled',false);
            _this.$el.find('#download-btn').prop('disabled', true);

            _this.$el.find('.date-setting').find('.w2ui-btn').removeClass('w2ui-btn-blue');

            setTimeout(function(){
                _this.$el.find('input[name=location]').val('전체');
           }, 200);


        },
        getToDay: function(){
            var date = new Date();
            var toYear = date.getFullYear();
            var tempMonth = date.getMonth()+1;
            var toMonth = tempMonth >= 10 ? tempMonth : '0'+tempMonth;
            var tempDate = date.getDate();
            var toDate = tempDate >= 10 ? tempDate : '0'+tempDate;

            var toDays = toYear+'/'+toMonth+'/'+toDate;

            return toDays;
        },
        setThisWeek: function(){
            console.log('setTHisWeek');
            var _this = this;
            var $targetBtn = _this.$el.find('#thisWeek-btn'); 
            var _hasClaz = $targetBtn.hasClass('w2ui-btn-blue');
            var _hasClazSiblings = $targetBtn.siblings().hasClass('w2ui-btn-blue');
            var _getToDay = _this.getToDay();
            if(_hasClaz){
                $targetBtn.removeClass('w2ui-btn-blue');
                _this.$el.find('input[name=startDate]').val(_getToDay);
                _this.$el.find('input[name=endDate]').val(_getToDay);
            } else {
                $targetBtn.addClass('w2ui-btn-blue');
                if(_hasClazSiblings){
                    $targetBtn.siblings().removeClass('w2ui-btn-blue');
                }
                var currentDay = new Date();  
                var theYear = currentDay.getFullYear();
                var theMonth = currentDay.getMonth();
                var theDate  = currentDay.getDate();
                var theDayOfWeek = currentDay.getDay();
                 
                var thisWeek = [];
                 
                for(var i=1; i<8; i++) {
                  var resultDay = new Date(theYear, theMonth, theDate + (i - theDayOfWeek));
                  var yyyy = resultDay.getFullYear();
                  var mm = Number(resultDay.getMonth()) + 1;
                  var dd = resultDay.getDate();
                 
                  mm = String(mm).length === 1 ? '0' + mm : mm;
                  dd = String(dd).length === 1 ? '0' + dd : dd;
                 
                  thisWeek[i] = yyyy + '/' + mm + '/' + dd;
                }
                console.log(thisWeek);     
                _this.$el.find('input[name=startDate]').val(thisWeek[1]);
                _this.$el.find('input[name=endDate]').val(thisWeek[7]);       

            }
        },
        setThisMonth: function(){
            console.log('setThisMonth');
            var _this = this;
            var $targetBtn = _this.$el.find('#thisMonth-btn'); 
            var _hasClaz = $targetBtn.hasClass('w2ui-btn-blue');
            var _hasClazSiblings = $targetBtn.siblings().hasClass('w2ui-btn-blue');
            var _getToDay = _this.getToDay();
            if(_hasClaz){
                $targetBtn.removeClass('w2ui-btn-blue');
                _this.$el.find('input[name=startDate]').val(_getToDay);
                _this.$el.find('input[name=endDate]').val(_getToDay);
            } else {
                $targetBtn.addClass('w2ui-btn-blue');
                if(_hasClazSiblings){
                    $targetBtn.siblings().removeClass('w2ui-btn-blue');
                }
                var date = new Date();
                var thisYear = date.getFullYear();
                var tempMonth = date.getMonth()+1;
                var thisMonth = tempMonth>= 10 ? tempMonth : '0'+tempMonth;
                var thisDate = '01';
    
                var startDate = thisYear+'/'+thisMonth+'/'+thisDate;
                var endDate = _getToDay;

                _this.$el.find('input[name=startDate]').val(startDate);
                _this.$el.find('input[name=endDate]').val(endDate);
            }
            

        },
        setLastMonth: function(){
            console.log('setLastMonth');
            var _this = this;
            var $targetBtn = _this.$el.find('#lastMonth-btn'); 
            var _hasClaz = $targetBtn.hasClass('w2ui-btn-blue');
            var _hasClazSiblings = $targetBtn.siblings().hasClass('w2ui-btn-blue');
            var _getToDay = _this.getToDay();
            if(_hasClaz){
                $targetBtn.removeClass('w2ui-btn-blue');
                _this.$el.find('input[name=startDate]').val(_getToDay);
                _this.$el.find('input[name=endDate]').val(_getToDay);
            } else {
                $targetBtn.addClass('w2ui-btn-blue');
                if(_hasClazSiblings){
                    $targetBtn.siblings().removeClass('w2ui-btn-blue');
                }
                var firstDay = new Date();
                firstDay.setMonth( firstDay.getMonth() - 1 ); 
                firstDay.setDate(1);

                var firstYear = firstDay.getFullYear();
                var tempFirstMonth = firstDay.getMonth()+1;
                var firstMonth = tempFirstMonth >= 10 ? tempFirstMonth : '0'+tempFirstMonth;
                var tempFirstDate = firstDay.getDate();
                var firstDate = tempFirstDate >= 10 ? tempFirstDate : '0'+tempFirstDate;
                var startLastDate = firstYear+'/'+firstMonth+'/'+firstDate; 

                var endDay = new Date();
                endDay.setMonth( endDay.getMonth() ); 
                endDay.setDate(0);

                var endYear = endDay.getFullYear();
                var tempEndMonth = endDay.getMonth()+1;
                var endMonth = tempEndMonth >= 10 ? tempEndMonth : '0'+tempEndMonth;
                var tempEndDate = endDay.getDate();
                var endDate = tempEndDate >= 10 ? tempEndDate : '0'+tempEndDate;
                var endLastDate = endYear+'/'+endMonth+'/'+endDate; 

                _this.$el.find('input[name=startDate]').val(startLastDate);
                _this.$el.find('input[name=endDate]').val(endLastDate);
            }        
            
        },
        dateCheck: function(){
            console.log('change');
            var _this =this;
            var startDate = _this.$el.find('input[name=startDate]').val();
            var endDate = _this.$el.find('input[name=endDate]').val(); 
            
            if(startDate > endDate){
                console.log('big');
                _this.$el.find('input[name=endDate]').addClass('w2ui-error');
                _this.$el.find('input[name=endDate]').w2tag('시작일 이후의 일자를 <br> 선택하세요.');
                _this.$el.find('#search-btn').prop('disabled',true);
                
            } else {
                _this.$el.find('input[name=endDate]').removeClass('w2ui-error');
                _this.$el.find('input[name=endDate]').w2tag();
                _this.$el.find('#search-btn').prop('disabled',false);
            }

        },
		destroy: function () {
			var _this = this;
			var gridName = _this.config.grid['name'];
			var formName = _this.config.form['name'];

			if (window.w2ui.hasOwnProperty(gridName)) {
				window.w2ui[gridName].destroy();
			}
			if (window.w2ui.hasOwnProperty(formName)) {
				window.w2ui[formName].destroy();
			}
			this.undelegateEvents();
		},
	});
});